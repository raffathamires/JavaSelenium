<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Michael Spector: Profiling Spark Applications: The Easy Way</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-34385728.post-4362206950328131090</guid>
	<link>http://spektom.blogspot.com/2017/06/profiling-spark-applications-easy-way.html</link>
	<description>&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Recently, I thought about some one-click way to profile Spark applications, so it could be easily integrated in any work environment without the need to configure the system.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The modern way to report profile statistics about an application (any application, not just Spark or Java application) is generating a single .SVG file called &quot;flame graph&quot;. Since this is a regular vector graphic format, the file can be opened in any browser. Moreover, you can navigate between different stack frames by clicking on them, and even search for a symbol name by clicking on &quot;Search&quot; link.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This is how sample flame graph looks like:&lt;br /&gt;&lt;div class=&quot;slate-resizable-image-embed slate-image-embed__resize-full-width&quot; contenteditable=&quot;false&quot;&gt;&lt;ul class=&quot;slate-image-embed__toolbar&quot; style=&quot;background-position: 0px 0px; border: 0px; height: 48px; line-height: 32px; padding: 0px 0px 8px; vertical-align: baseline; width: 744px;&quot;&gt;&lt;li style=&quot;background-position: 0px 0px; border: 0px; display: inline-block; margin: 0px 4px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;button class=&quot;slate-image-embed-button__resize-left slate-image-embed-button&quot;&gt;&lt;/button&gt;&lt;/li&gt;&lt;li style=&quot;background-position: 0px 0px; border: 0px; display: inline-block; margin: 0px 4px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;button class=&quot;slate-image-embed-button__resize-middle slate-image-embed-button&quot;&gt;&lt;/button&gt;&lt;/li&gt;&lt;li style=&quot;background-position: 0px 0px; border: 0px; display: inline-block; margin: 0px 4px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;button class=&quot;slate-image-embed-button__resize-full-width slate-image-embed-button slate-image-embed-button__active&quot;&gt;&lt;/button&gt;&lt;/li&gt;&lt;li style=&quot;background-position: 0px 0px; border: 0px; display: inline-block; margin: 0px 4px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;button class=&quot;slate-image-embed-button__resize-bleed slate-image-embed-button&quot;&gt;&lt;/button&gt;&lt;/li&gt;&lt;li style=&quot;background-position: 0px 0px; border: 0px; display: inline-block; margin: 0px 4px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;button class=&quot;slate-image-embed-button__resize-right slate-image-embed-button&quot;&gt;&lt;/button&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img class=&quot;slate-image-embed__resize-full-width&quot; src=&quot;https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAt_AAAAJDQ4YTE2NTE3LTc1ZGEtNDk1OC04MTQ0LWNhNWJhMzFlMTI2Mg.png&quot; style=&quot;background-position: 0px 0px; border: 0px; display: inline-block; height: auto; margin: 0px auto; padding: 0px; vertical-align: baseline; width: 744px;&quot; /&gt;&lt;/div&gt;The y-axis shows the stack depth while the x-axis shows time spent in a stack frame.&lt;br /&gt;&lt;br /&gt;In order to generate flame graphs, there are two mandatory processes usually: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Capture stack traces from a running process, and dump them to disk. &lt;/li&gt;&lt;li&gt;Parse these stack traces, and generate .SVG file. &lt;/li&gt;&lt;/ul&gt;For Java based applications it stack traces can be gathered using commercial features of Oracle JDK (using -XX:+FlightRecorder option). There's an &lt;a href=&quot;https://gist.github.com/kayousterhout/7008a8ebf2babeedc7ce6f8723fd1bf4&quot;&gt;article&lt;/a&gt; that explains how to profile Spark applications using this option.&lt;br /&gt;&lt;br /&gt;In OpenJDK this feature is not available, but luckily there are other options. Once of them is using &lt;a href=&quot;https://github.com/etsy/statsd-jvm-profiler&quot;&gt;statsd JVM profiler&lt;/a&gt; library from &lt;a href=&quot;http://etsy.com/&quot;&gt;Etsy&lt;/a&gt;. This library integrates as agent into JVM, gathers statistics like CPU or memory usage, and send it to &lt;a href=&quot;https://github.com/etsy/statsd&quot;&gt;statsd&lt;/a&gt; server in real time. Apparently, this library supports reporting to InfluxDB &lt;a href=&quot;https://github.com/etsy/statsd-jvm-profiler/blob/master/src/main/java/com/etsy/statsd/profiler/reporter/InfluxDBReporter.java&quot;&gt;as well&lt;/a&gt; .&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Keeping the above in mind, the whole process will look like this:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Have InfluxDB running on random port.&lt;/li&gt;&lt;li&gt;Start Spark with the statsd profiler Jar in its classpath and with the configuration that tells it to report statistics back to the InfluxDB instance.&lt;/li&gt;&lt;li&gt;After running Spark application, query all the reported metrics from the InfluxDB instance.&lt;/li&gt;&lt;li&gt;Run a script that generates the target report.&lt;/li&gt;&lt;li&gt;Stop the InfluxDB instance.&lt;/li&gt;&lt;li&gt;Store generated .SVG file somewhere, or send it to someone.&lt;/li&gt;&lt;/ol&gt;The following script is a wrapper to ‘spark-submit’ command, which does all that:&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:bash&quot;&gt;#!/bin/bash&lt;br /&gt;&lt;br /&gt;set -e&lt;br /&gt;trap 'kill $(jobs -p) 2&amp;gt;/dev/null' EXIT&lt;br /&gt;&lt;br /&gt;function find_unused_port() {&lt;br /&gt;  for port in $(seq $1 65000); do&lt;br /&gt;    echo -ne &quot;\035&quot; | telnet 127.0.0.1 $port &amp;gt;/dev/null 2&amp;gt;&amp;amp;1;&lt;br /&gt;    if [ $? -eq 1 ]; then&lt;br /&gt;      echo $port&lt;br /&gt;      exit&lt;br /&gt;    fi&lt;br /&gt;  done&lt;br /&gt;  echo &quot;ERROR: Can't find unused port in range $1-65000&quot;&lt;br /&gt;  exit 1&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function install_deps() {&lt;br /&gt;  for cmd in python2.7 perl pip; do&lt;br /&gt;    if ! which $cmd &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then&lt;br /&gt;      echo &quot;ERROR: $cmd is not installed!&quot;&lt;br /&gt;      exit 1&lt;br /&gt;    fi&lt;br /&gt;  done&lt;br /&gt;&lt;br /&gt;  echo -e &quot;[$(date +%FT%T)] Installing dependencies&quot;&lt;br /&gt;  [ ! -d $install_dir ] &amp;amp;&amp;amp; mkdir $install_dir&lt;br /&gt;  pushd $install_dir &amp;gt;/dev/null&lt;br /&gt;  pip -q install --user influxdb blist&lt;br /&gt;&lt;br /&gt;  wget -qc https://github.com/etsy/statsd-jvm-profiler/releases/download/2.1.0/statsd-jvm-profiler-2.1.0-jar-with-dependencies.jar&lt;br /&gt;  ln -sf statsd-jvm-profiler-2.1.0-jar-with-dependencies.jar statsd-jvm-profiler.jar&lt;br /&gt;&lt;br /&gt;  wget -qc https://raw.githubusercontent.com/aviemzur/statsd-jvm-profiler/master/visualization/influxdb_dump.py&lt;br /&gt;  wget -qc https://raw.githubusercontent.com/brendangregg/FlameGraph/master/flamegraph.pl&lt;br /&gt;&lt;br /&gt;  wget -qc https://dl.influxdata.com/influxdb/releases/influxdb-1.2.4_linux_amd64.tar.gz&lt;br /&gt;  tar -xzf influxdb-1.2.4_linux_amd64.tar.gz&lt;br /&gt;  ln -sf influxdb-1.2.4-1 influxdb&lt;br /&gt;  popd &amp;gt;/dev/null&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function run_influxdb() {&lt;br /&gt;  echo -e &quot;[$(date +%FT%T)] Starting InfluxDB&quot;&lt;br /&gt;  cat &amp;lt;&amp;lt; EOF &amp;gt;influxdb.conf&lt;br /&gt;reporting-disabled = true&lt;br /&gt;hostname = &quot;${local_ip}&quot;&lt;br /&gt;bind-address = &quot;:${influx_meta_port}&quot;&lt;br /&gt;[meta]&lt;br /&gt;  dir = &quot;$(pwd)/influxdb/meta&quot;&lt;br /&gt;[data]&lt;br /&gt;  dir = &quot;$(pwd)/influxdb/data&quot;&lt;br /&gt;  wal-dir = &quot;$(pwd)/influxdb/wal&quot;&lt;br /&gt;[admin]&lt;br /&gt;  enabled = false&lt;br /&gt;[http]&lt;br /&gt;  bind-address = &quot;:${influx_http_port}&quot;&lt;br /&gt;EOF&lt;br /&gt;  rm -rf influxdb&lt;br /&gt;  $install_dir/influxdb/usr/bin/influxd -config influxdb.conf &amp;gt;influxdb.log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;br /&gt;&lt;br /&gt;  wait_secs=5&lt;br /&gt;  while [ $wait_secs -gt 0 ]; do&lt;br /&gt;    if curl -sS -i $influx_uri/ping 2&amp;gt;/dev/null | grep X-Influxdb-Version &amp;gt;/dev/null; then&lt;br /&gt;      break&lt;br /&gt;    fi&lt;br /&gt;    sleep 1&lt;br /&gt;    wait_secs=$(($wait_secs-1))&lt;br /&gt;  done&lt;br /&gt;&lt;br /&gt;  if [ $wait_secs -eq 0 ]; then&lt;br /&gt;    echo &quot;ERROR: Couldn't start InfluxDB!&quot;&lt;br /&gt;    exit 1&lt;br /&gt;  fi&lt;br /&gt;&lt;br /&gt;  curl -sS -X POST $influx_uri/query --data-urlencode &quot;q=CREATE DATABASE profiler&quot; &amp;gt;/dev/null&lt;br /&gt;  curl -sS -X POST $influx_uri/query --data-urlencode &quot;q=CREATE USER profiler WITH PASSWORD 'profiler' WITH ALL PRIVILEGES&quot; &amp;gt;/dev/null&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function run_spark_submit() {&lt;br /&gt;  spark_args=()&lt;br /&gt;  jars=$install_dir/statsd-jvm-profiler.jar&lt;br /&gt;  while [[ $# &amp;gt; 0 ]]; do&lt;br /&gt;    case &quot;$1&quot; in&lt;br /&gt;      --jars) jars=&quot;$jars,$2&quot;&lt;br /&gt;        shift&lt;br /&gt;        ;;&lt;br /&gt;      *) spark_args+=(&quot;$1&quot;)&lt;br /&gt;        [[ &quot;$1&quot; == *.jar ]] &amp;amp;&amp;amp; flamegraph_title=&quot;$1&quot;&lt;br /&gt;        ;;&lt;br /&gt;    esac&lt;br /&gt;    shift&lt;br /&gt;  done&lt;br /&gt;&lt;br /&gt;  spark_cmd=(spark-submit)&lt;br /&gt;  spark_cmd+=(--jars)&lt;br /&gt;  spark_cmd+=(&quot;$jars&quot;)&lt;br /&gt;  spark_cmd+=(--conf)&lt;br /&gt;  spark_cmd+=(&quot;spark.executor.extraJavaOptions=-javaagent:statsd-jvm-profiler.jar=server=${local_ip},port=${influx_http_port},reporter=InfluxDBReporter,database=profiler,username=profiler,password=profiler,prefix=sparkapp,tagMapping=spark&quot;)&lt;br /&gt;  spark_cmd+=(${spark_args[@]})&lt;br /&gt;&lt;br /&gt;  echo -e &quot;[$(date +%FT%T)] Executing: ${spark_cmd[@]}&quot;&lt;br /&gt;  &quot;${spark_cmd[@]}&quot;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function generate_flamegraph() {&lt;br /&gt;  rm -rf stack_traces&lt;br /&gt;  python2.7 $install_dir/influxdb_dump.py -o $local_ip -r $influx_http_port -u profiler -p profiler -d profiler -t spark -e sparkapp -x stack_traces&lt;br /&gt;  perl $install_dir/flamegraph.pl --title &quot;$flamegraph_title&quot; stack_traces/all_*.txt &amp;gt; flamegraph.svg&lt;br /&gt;  rm -rf stack_traces&lt;br /&gt;  echo -e &quot;[$(date +%FT%T)] Created flamegraph: $(pwd)/flamegraph.svg&quot;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;local_ip=$(ip route get 8.8.8.8 | awk '{print $NF; exit}')&lt;br /&gt;install_dir=$HOME/.spark-flamegraph&lt;br /&gt;influx_meta_port=$(find_unused_port 48080)&lt;br /&gt;influx_http_port=$(find_unused_port $(($influx_meta_port+1)))&lt;br /&gt;influx_uri=http://${local_ip}:${influx_http_port}&lt;br /&gt;flamegraph_title=&quot;Spark Application&quot;&lt;br /&gt;&lt;br /&gt;install_deps&lt;br /&gt;run_influxdb&lt;br /&gt;run_spark_submit &quot;$@&quot;&lt;br /&gt;generate_flamegraph&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: #f3f6f8; font-size: 1.6rem;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;The script is also available on &lt;a href=&quot;https://gist.github.com/spektom/ee08f071b6ee31ff6c27de29980b49a7&quot;&gt;this&lt;/a&gt; gist.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;For the sake of justice, it should be noted that the following utilities must present on your system prior to running the script: perl, python2.7 and pip. Otherwise, the script was used in Amazon EMR environment without any issues. Just use the script instead of usual spark-submit command, and it will profile your application. and create a report:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;pre class=&quot;brush:bash&quot;&gt;[hadoop@ip-10-121-4-244 tmp]$ ./spark-submit-flamegraph --name 'etlite' --jars file://$(pwd)/probe-events-1.0.jar etlite_2.11-0.1.0.jar s3://mobility-artifacts/airflow/latest/config/etlite.conf&lt;br /&gt;[2017-06-05T12:34:05] Installing dependencies&lt;br /&gt;[2017-06-05T12:34:09] Starting InfluxDB&lt;br /&gt;[2017-06-05T12:34:10] Executing: spark-submit --jars /home/hadoop/.spark-flamegraph/statsd-jvm-profiler.jar,file:///tmp/probe-events-1.0.jar --conf spark.executor.extraJavaOptions=-javaagent:statsd-jvm-profiler.jar=server=10.121.4.244,port=48081,reporter=InfluxDBReporter,database=profiler,username=profiler,password=profiler,prefix=sparkapp,tagMapping=spark --name etlite etlite_2.11-0.1.0.jar s3://mobility-artifacts/airflow/latest/config/etlite.conf&lt;br /&gt;17/06/05 12:34:11 INFO Main$: Configuration file = 's3://mobility-artifacts/airflow/latest/config/etlite.conf'&lt;br /&gt;17/06/05 12:34:14 INFO S3NativeFileSystem: Opening 's3://mobility-artifacts/airflow/latest/config/etlite.conf' for reading&lt;br /&gt;17/06/05 12:34:15 INFO SparkContext: Running Spark version 2.1.0&lt;br /&gt;&lt;br /&gt;... running Spark application ...&lt;br /&gt;&lt;br /&gt;17/06/05 12:35:17 INFO SparkContext: Successfully stopped SparkContext&lt;br /&gt;17/06/05 12:35:17 INFO ShutdownHookManager: Shutdown hook called&lt;br /&gt;17/06/05 12:35:17 INFO ShutdownHookManager: Deleting directory /mnt/tmp/spark-fa12133c-b605-4a73-814a-2dfd4ed6fdde&lt;br /&gt;&lt;br /&gt;... generating .svg file ...&lt;br /&gt;&lt;br /&gt;[2017-06-05T12:35:25] Created flamegraph: /tmp/flamegraph.svg&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Integrating this script into Airflow Spark operator is straightforward, especially if your Spark operator is derived from BashOperator. Just make sure the script is available on all Spark Airflow workers, then do the replacement of spark-submit command depending on whether profile=True is passed as the operator argument.&lt;br /&gt;&lt;br /&gt;Post your weird flame graphs in comments! :)&lt;/div&gt;</description>
	<pubDate>Sun, 25 Jun 2017 07:20:00 +0000</pubDate>
	<author>noreply@blogger.com (Michael)</author>
</item>
<item>
	<title>Jeremie Bresson: Asciidoctor: watch you build log</title>
	<guid isPermaLink="true">http://jmini.github.io/blog/2017/2017-06-25_asciidoctor-watch-build-log.html</guid>
	<link>http://jmini.github.io/blog/2017/2017-06-25_asciidoctor-watch-build-log.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Last thursday at Voxxed Days Luxembourg I had the opportunity to speak about asciidoctor in my talk (&lt;a href=&quot;http://cfp-voxxed-lux.yajug.org/2017/talk/KMC-5325/Documentation_as_code:_controler_la_qualite_!&quot;&gt;Documentation as code: contrôler la qualité !&lt;/a&gt;). Voxxed Days conferences are similar to Devoxx, but smaller (only one day). It was the second edition of Voxxed Days Luxembourg and the conference is really great (perfect organization, pleasant ambience, nice people and interesting conversations).&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Voxxed Days Luxembourg&quot; src=&quot;http://jmini.github.io/blog/2017/2017-06-25_voxxed-pictures.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Back to my talk, I want to provide more details about a point I have presented: &lt;strong&gt;how to monitor your asciidoctor build logs with jenkins&lt;/strong&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;During the build, asciidoctor tells you when something is unexpected. Let me give you a real example: In the &lt;a href=&quot;http://eclipsescout.github.io/&quot;&gt;eclipse scout documentation&lt;/a&gt;, you have a lot of code snippets with callouts to mark certain lines.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot; id=&quot;fig-doc&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Eclipse Scout documentation extract&quot; src=&quot;http://jmini.github.io/blog/2017/2017-06-25_eclipse-scout-doc-example.png&quot; /&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Figure 1. Eclipse scout documentation extract
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;In order to do this, you need to define the callout in your source code and add the explanation after the code snippet as presented in &lt;a href=&quot;http://jmini.github.io/blog/2017/2017-06-25_asciidoctor-watch-build-log.html#lst-callout&quot;&gt;Listing 1&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot; id=&quot;lst-callout&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 1. Callout example
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot;&gt;[source,adoc]
.Initial implementation of class OrganizationTablePage.
----
(..)
    return TEXTS.get(&quot;Organizations&quot;); // &amp;lt;1&amp;gt;
(..)
----
&amp;lt;1&amp;gt; Make sure to add a translated text entry for &quot;Organizations&quot; using the Scout NLS tooling&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If there is a mismatch between the two elements, you will get a warning in your logs:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre&gt;[INFO]
[INFO] --- asciidoctor-maven-plugin:1.5.5:process-asciidoc (book_scout_intro-to-html) @ scout_beginners_guide ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] ignoreDelta true
[INFO] Copying 0 resource
asciidoctor: WARNING: _TutorialStep2.adoc: line 247: no callouts refer to list item 1 beginners_guide/src/docs/beginners-guide.adoc
[INFO]&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If you are using Jenkins as continuous integration server, the &lt;a href=&quot;https://plugins.jenkins.io/warnings&quot;&gt;warnings plugin&lt;/a&gt; helps you to find those lines in your log. It also keeps a record of them, in order to track the evolution over the time.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Jenkins Job&quot; src=&quot;http://jmini.github.io/blog/2017/2017-06-25_jenkins.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Here is how you can configure the plugin in the admin view in order to detect the asciidoctor lines:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Jenkins Admin configuration&quot; src=&quot;http://jmini.github.io/blog/2017/2017-06-25_jenkins_admin_config.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 2. Regular expression:
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre&gt;asciidoctor: (WARNING|ERROR): ([^:]+): line ([0-9]+): (.*)&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 3. Mapping Script:
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre&gt;import hudson.plugins.warnings.parser.Warning

String category = matcher.group(1)
String fileName = matcher.group(2)
String lineNumber = matcher.group(3)
String message = matcher.group(4)

return new Warning(fileName, Integer.parseInt(lineNumber), &quot;Dynamic Parser&quot;, category, message);&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Then in your build definition you need to add a post-build step:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Jenkins Job configuration&quot; src=&quot;http://jmini.github.io/blog/2017/2017-06-25_jenkins_job_config.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Now you are informed when something goes wrong in your documentation. By the way there is the idea that Asciidoctor could produce a report containing all the warnings and errors that are discovered during the build. They could be collected in a xml or json file. For the moment &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor/issues/44&quot;&gt;issue #44&lt;/a&gt; is still open.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;By the way my slides are online on &lt;a href=&quot;https://www.slideshare.net/jmini/20170622-documentation-as-code&quot;&gt;SlideShare&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;PS: I have already proposed &lt;a href=&quot;https://www.eclipsecon.org/europe2017/session/documentation-code-asciidoctor&quot;&gt;a talk&lt;/a&gt; for EclipseCon Europe 2017. I hope I will get a slot to be able to present more aspects of the &quot;documentation as code&quot; pattern.&lt;/p&gt; 
&lt;/div&gt;</description>
	<pubDate>Sat, 24 Jun 2017 22:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: PolarSys Capella Industry Consortium (IC) at Eclipse PolarSys</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/-uG-dAzqyK4/capella-ic-announced</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/-uG-dAzqyK4/capella-ic-announced</link>
	<description>PolarSys Capella IC to host the Capella Ecosystem stakeholders in a vendor neutral way, organized by an open governance model.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/-uG-dAzqyK4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 20 Jun 2017 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: Woohoo! Java 9 has a REPL! Getting Started with JShell and Eclipse January</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=2261</guid>
	<link>https://kichwacoders.com/2017/05/25/woohoo-java-9-has-a-repl-getting-started-with-jshell-and-eclipse-january/</link>
	<description>&lt;p&gt;With Java 9 just around the corner, we explore one of its most exciting new features – the Java 9 REPL (&lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;Read-Eval-Print Loop&lt;/a&gt;). This REPL is called JShell and it’s a great addition to the Java platform. Here’s why.&lt;/p&gt;
&lt;p&gt;With JShell you can easily try out new features and quickly check the behaviour of a section of code. You don’t have to create a long-winded dummy main or JUnit test – simply type away.  To demonstrate the versatility of JShell, I am going to use it in conjunction with the Eclipse January package for data structures. Eclipse January is a set of libraries for handling numerical data in Java, think of it as a ‘numpy for Java’.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Install JShell&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;JShell is part of Java 9, currently available in an Early Access version from Oracle and other sources. Download and install Java 9 JDK from &lt;a href=&quot;http://jdk.java.net/9/&quot;&gt;http://jdk.java.net/9/&lt;/a&gt; or, if you have it available on your platform, you can install with your package manager (e.g. &lt;code&gt;sudo apt-get install openjdk-9-jdk&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Start a terminal and run JShell:&lt;img alt=&quot;capture1&quot; class=&quot;alignnone size-full wp-image-2269&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/capture1.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, JShell allows you to type normal Java statements, leave off semi-colons, run expressions, access expressions from previous outputs, and achieve many other short-cuts. (You can exit JShell with Ctrl-D.)&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Using JShell with Eclipse January&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To use Eclipse January, you need to:&lt;/p&gt;
&lt;p&gt;1. Download January:&lt;/p&gt;
&lt;p&gt;Get the &lt;a href=&quot;http://download.eclipse.org/january/releases/2.0.2/repository/plugins/org.eclipse.january_2.0.2.v201706051401.jar&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;January 2.0.2 jar&lt;/a&gt; ( or older version &lt;a href=&quot;http://download.eclipse.org/january/releases/2.0.1/repository/plugins/org.eclipse.january_2.0.1.v201703300842.jar&quot;&gt;January 2.0.1 jar)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2. Download the dependency jars:&lt;/p&gt;
&lt;p&gt;The January dependencies are available from &lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops/R20170516192513/&quot;&gt;Eclipse Orbit&lt;/a&gt;, they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops2/R20170516192513/repository/plugins/org.slf4j.api_1.7.10.v20170428-1633.jar&quot;&gt;org.slf4j.api – 1.7.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops2/R20170516192513/repository/plugins/org.slf4j.binding.nop_1.7.10.v20160301-1109.jar&quot;&gt;org.slf4j.binding.nop  – 1.7.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops2/R20170516192513/repository/plugins/org.apache.commons.math3_3.5.0.v20160301-1110.jar&quot;&gt;org.apache.commons.math3 – 3.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops/R20170303204511/repository/plugins/org.apache.commons.lang_2.6.0.v201404270220.jar&quot;&gt;org.apache.commons.lang – 2.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3. Run JShell again, but add to the classpath all the jars you downloaded (remember to be the in the directory you downloaded the jars to):&lt;/p&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&quot;c:\Program Files\Java\jdk-9\bin\jshell.exe&quot;  --class-path org.eclipse.january_2.0.2.v201706051401.jar;org.apache.commons.lang_2.6.0.v201404270220.jar;org.apache.commons.math3_3.5.0.v20160301-1110.jar;org.slf4j.api_1.7.10.v20170428-1633.jar;org.slf4j.binding.nop_1.7.10.v20160301-1109.jar&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jshell --class-path org.eclipse.january_2.0.2.v201706051401.jar:org.apache.commons.lang_2.6.0.v201404270220.jar:org.apache.commons.math3_3.5.0.v20160301-1110.jar:org.slf4j.api_1.7.10.v20170428-1633.jar:org.slf4j.binding.nop_1.7.10.v20160301-1109.jar&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Some notes:&lt;br /&gt;
Some version of jshell the command line argument is called &lt;code&gt;-classpath&lt;/code&gt; instead of &lt;code&gt;--class-path&lt;/code&gt;&lt;br /&gt;
If you are using git bash as your shell on Windows, add &lt;code&gt;winpty&lt;/code&gt; before calling jshell and use colons to separate the path elements.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;capture2&quot; class=&quot;alignnone size-full wp-image-2270&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/capture2.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then you can run through the different types of January commands. Note JShell supports completions using the ‘Tab’ key. Also use &lt;code&gt;/!&lt;/code&gt; to rerun the last command.&lt;/p&gt;
&lt;h2&gt;Import classes&lt;/h2&gt;
&lt;p&gt;Start by importing the needed classes:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import org.eclipse.january.dataset.*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(No need for semi-colons and you can use the normally ill-advised * import)&lt;/p&gt;
&lt;h2&gt;Array Creation&lt;/h2&gt;
&lt;p&gt;Eclipse January supports straightforward creation of arrays. Let’s say we want to create a 2-dimensional array with the following data:&lt;/p&gt;
&lt;pre&gt;[1.0, 2.0, 3.0,
 4.0, 5.0, 6.0,
 7.0, 8.0, 9.0]&lt;/pre&gt;
&lt;p&gt;First we can create a new dataset:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset dataset = DatasetFactory.createFromObject(new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 })&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This gives us a 1-dimensional array with 9 elements, as shown below:&lt;/p&gt;
&lt;pre&gt;[1.0000000, 2.0000000, 3.0000000, 4.0000000, 5.0000000, 6.0000000, 7.0000000, 8.0000000, 9.0000000]
&lt;/pre&gt;
&lt;p&gt;We then need to reshape it to be a 3×3 array:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dataset = dataset.reshape(3, 3)&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reshaped dataset:&lt;/p&gt;
&lt;pre&gt; [[1.0000000, 2.0000000, 3.0000000],
 [4.0000000, 5.0000000, 6.0000000],
 [7.0000000, 8.0000000, 9.0000000]]
&lt;/pre&gt;
&lt;p&gt;Or we can do it all in just one step:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset another = DatasetFactory.createFromObject(new double[] { 1, 1, 2, 3, 5, 8, 13, 21, 34 }).reshape(3, 3)&lt;br /&gt;
System.out.println(another.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Another dataset:&lt;/p&gt;
&lt;pre&gt; [[1.0000000, 1.0000000, 2.0000000],
 [3.0000000, 5.0000000, 8.0000000],
 [13.000000, 21.000000, 34.000000]]
&lt;/pre&gt;
&lt;p&gt;There are methods for obtaining the shape and number of dimensions of datasets&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dataset.getShape()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;dataset.getRank()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which gives us:&lt;/p&gt;
&lt;pre&gt;jshell&amp;gt; dataset.getShape()
$8 ==&amp;gt; int[2] { 3, 3 }

jshell&amp;gt; dataset.getRank()
$9 ==&amp;gt; 2&lt;/pre&gt;
&lt;p&gt;Datasets also provide functionality for ranges and a random function that all allow easy creation of arrays:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset dataset = DatasetFactory.createRange(15, Dataset.INT32).reshape(3, 5)&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[[0, 1, 2, 3, 4],
 [5, 6, 7, 8, 9],
 [10, 11, 12, 13, 14]]
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
import org.eclipse.january.dataset.Random //specify Random class (see this is why star imports are normally bad)&lt;br /&gt;
Dataset another = Random.rand(new int[]{3,5})&lt;br /&gt;
System.out.println(another.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[[0.27243843, 0.69695728, 0.20951172, 0.13238926, 0.82180144],
 [0.56326222, 0.94307839, 0.43225034, 0.69251040, 0.22602319],
 [0.79244049, 0.15865358, 0.64611131, 0.71647195, 0.043613393]]
&lt;/pre&gt;
&lt;h2&gt;Array Operations&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january/src/org/eclipse/january/dataset/Maths.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;org.eclipse.january.dataset.Maths&lt;/a&gt; provides rich functionality for operating on the Dataset classes. For instance, here’s how you could add 2 Dataset arrays:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset add = Maths.add(dataset, another)&lt;br /&gt;
System.out.println(add.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or you could do it as an inplace addition. The example below creates a new 3×3 array and then adds 100 to each element of the array.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset inplace = DatasetFactory.createFromObject(new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }).reshape(3, 3)&lt;br /&gt;
inplace.iadd(100)&lt;br /&gt;
System.out.println(inplace.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[[101.0000000, 102.0000000, 103.0000000],
 [104.0000000, 105.0000000, 106.0000000],
 [107.0000000, 108.0000000, 109.0000000]]&lt;/pre&gt;
&lt;h2&gt;Slicing&lt;/h2&gt;
&lt;p&gt;Datasets simplify extracting portions of the data, known as ‘slices’. For instance, given the array below, let’s say we want to extract the data 2, 3, 5 and 6.&lt;/p&gt;
&lt;pre&gt;[1, 2, 3,
 4, 5, 6,
 7, 8, 9]
&lt;/pre&gt;
&lt;p&gt;This data resides in the first and second rows and the second and third columns. For slicing, indices for rows and columns are zero-based. A basic slice consists of a start and stop index, where the start index is inclusive and the stop index is exclusive. An optional increment may also be specified. So this example would be expressed as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset dataset = DatasetFactory.createFromObject(new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }).reshape(3, 3)&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;br /&gt;
Dataset slice = dataset.getSlice(new Slice(0, 2), new Slice(1, 3))&lt;br /&gt;
System.out.println(slice.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;slice of dataset:&lt;/p&gt;
&lt;pre&gt;[[2.0000000, 3.0000000],
 [5.0000000, 6.0000000]]
&lt;/pre&gt;
&lt;p&gt;Slicing and array manipulation functionality is particularly valuable when dealing with 3-dimensional or n-dimensional data.&lt;/p&gt;
&lt;h2&gt;Wrap-Up&lt;/h2&gt;
&lt;p&gt;For more on Eclipse January see the following examples and give them a go in JShell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/NumpyExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;NumPy Examples&lt;/a&gt; shows how common NumPy constructs map to Eclipse Datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/SlicingExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Slicing Examples&lt;/a&gt; demonstrates slicing, including how to slice a small amount of data out of a dataset too large to fit in memory all at once.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/ErrorExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Error Examples&lt;/a&gt; demonstrates applying an error to datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/IterationExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Iteration Examples&lt;/a&gt; demonstrates a few ways to iterate through your datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/LazyExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Lazy Examples&lt;/a&gt; demonstrates how to use datasets which are not entirely loaded in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eclipse January is a ‘numpy for Java’ but until now users have not really been able to play around with it in the same way you would numpy in Python.&lt;/p&gt;
&lt;p&gt;JShell provides a great way to test drive libraries like Eclipse January. There are a couple of features that would be nice-to-have such as a magic variable for the last result (maybe &lt;code&gt;$_&lt;/code&gt; or &lt;code&gt;$!&lt;/code&gt;) and maybe a shorter way to print a result (maybe &lt;code&gt;/p&lt;/code&gt; :-). But overall, it is great to have and finally gives Java the REPL and ability to be used interactively that many have gotten so used to with other programming languages.&lt;/p&gt;
&lt;p&gt;In fact we will be making good use of JShell for the Eclipse January workshop being held at EclipseCon France, see details and register here:  &lt;a href=&quot;https://www.eclipsecon.org/france2017/session/eclipse-january&quot;&gt;https://www.eclipsecon.org/france2017/session/eclipse-january&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;eclipseConV2&quot; class=&quot;alignnone size-full wp-image-2308&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/eclipseconv2.jpg?w=840&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/2261/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/2261/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=2261&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 19 Jun 2017 20:16:40 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: Getting Started with Jekyll (on Windows!)</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=2073</guid>
	<link>https://kichwacoders.com/2017/06/16/getting-started-with-jekyll-on-windows/</link>
	<description>&lt;blockquote&gt;&lt;p&gt; This week Kichwa Coders’ intern Jean Philippe found out the hard way that when it comes to building websites, having the right tools for the job is vital to success. Follow his progress as he explores the potential of using Jekyll to build a user-friendly, easy to maintain static website on Windows.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;&lt;strong&gt;What is Jeykll and why do we use it?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;Jekyll uses Markdown – a text-to-HTML conversion tool – to create a a blog-aware static website that doesn’t require a huge amount of maintenance. Once you have created the structure you just have to add your own Markdown file and Jekyll will add it to the website. The appeal of Jeykll for many users is that it allows content editors to edit the site without knowing how to code. After some rudimentary experience I can now create a basic Jeykll website.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How easy is it to get started with Jeykll?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This week I built my first website using Jekyll. I had some initial difficulties understanding how to use it, but once I’d got the basics I was able to come up with ideas on how to get the best out of it. Before you can install Jekyll you need to install Ruby and Bundle. I’m on Windows, so at first it was hard to install Jekyll as it is more suited to Linux, Linux users are most familiar by using command line and it’s easier to install Ruby and Bundle on Linux but I found this &lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot;&gt;website&lt;/a&gt;.  However when I attempted to build a new project with the command “Jeykll new newproject” I got this:&lt;a href=&quot;https://github.com/Jdarroy/Internship/blob/master/blogpost/jekyll%20new%20newproject.PNG&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image&quot; src=&quot;https://github.com/Jdarroy/Internship/raw/master/blogpost/jekyll%20new%20newproject.PNG&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This wasn’t what I was expecting &lt;span id=&quot;more-2073&quot;&gt;&lt;/span&gt;and I was just wondering what to do next when a colleague pointed out that this was a problem with the version of Jekyll that I had on my laptop – and that the project showing on my screen was in fact correct – phew! I went back to some useful tutorials and discovered that I needed to create some specific folders and add the initial group of folders to them. I called these new folders  ‘_includes’ and  ‘_layouts’.  I then had to create some files to build the structure of the website.&lt;/p&gt;
&lt;p&gt;Having got my basic website up and running I wanted to build a new project within it, but again I ran into difficulties almost immediately. I assumed I had made a mistake earlier on in the process as I did not appear to have the correct architecture to build my project with. But then it became clear that there are&lt;em&gt;&lt;strong&gt; two&lt;/strong&gt;&lt;/em&gt; ways to install Jekyll. The first is with the instruction “sudo apt-get install jeykll”; and the second using Ruby is “gem install jeykll”. The difference between these two instructions is crucial as the first installs an older system of Jeykll and the second installs the latest version. Most of the help and tuition online is for the older version of Jekyll and this was what was confusing me as I was working on a newer version. Once I had installed the software on a linux and given the command “sudo apt-get install jekyll” I was able to proceed.&lt;/p&gt;
&lt;p&gt;My first attempt at a Jeykll website is now online and looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jdarroy/Internship/blob/master/blogpost/FireShot%20Screen%20Capture%20%23018%20-%20'Eclipse%20January'%20-%20jdarroy_github_io.png&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image&quot; src=&quot;https://github.com/Jdarroy/Internship/raw/master/blogpost/FireShot%20Screen%20Capture%20%23018%20-%20'Eclipse%20January'%20-%20jdarroy_github_io.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jdarroy/Internship/blob/master/blogpost/FireShot%20Screen%20Capture%20%23019%20-%20'Docs%20I%20Eclipse%20January'%20-%20jdarroy_github_io_docs.png&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image&quot; src=&quot;https://github.com/Jdarroy/Internship/raw/master/blogpost/FireShot%20Screen%20Capture%20%23019%20-%20'Docs%20I%20Eclipse%20January'%20-%20jdarroy_github_io_docs.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jdarroy/Internship/blob/master/blogpost/FireShot%20Screen%20Capture%20%23020%20-%20'News%20I%20Eclipse%20January'%20-%20jdarroy_github_io_docs_news.png&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image&quot; src=&quot;https://github.com/Jdarroy/Internship/raw/master/blogpost/FireShot%20Screen%20Capture%20%23020%20-%20'News%20I%20Eclipse%20January'%20-%20jdarroy_github_io_docs_news.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jdarroy/Internship/blob/master/blogpost/FireShot%20Screen%20Capture%20%23021%20-%20'About%20I%20Eclipse%20January'%20-%20jdarroy_github_io_about.png&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image&quot; src=&quot;https://github.com/Jdarroy/Internship/raw/master/blogpost/FireShot%20Screen%20Capture%20%23021%20-%20'About%20I%20Eclipse%20January'%20-%20jdarroy_github_io_about.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;It’s still a work in progress but I’m really pleased with the results so far. Using online tutorials and help forums etc is a great way to learn your way around something new- but don’t forget to check your sources are relevant to the software you’re using.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s Next?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m hoping to create a website with different topics.  The home page will reproduce the style of the existing January website, but in addition I will include a “Docs” page where  you can read all the posts so far about January project. At the moment that’s mainly the work completed by my colleagues at Kichwa Coders, but in the future it could be anyone with something to say about January. I hope it will be grow to be a useful resource.&lt;/p&gt;
&lt;p&gt;The best aspect of Jekyll is that when I  finish the website, I can add a post in markdown and add it to the website easily. I recommend using Jekyll if you want a quick and easy way to add posts, and if you don’t want to write any HTML.  you just have to build the structure and then if you want to add some post you just have to put markdown files in.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/2073/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/2073/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=2073&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 16 Jun 2017 11:31:34 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: I’m being supported!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=740</guid>
	<link>https://papyrusuml.wordpress.com/2017/06/09/im-being-supported/</link>
	<description>&lt;p&gt;There was allready an effort under way, named &lt;a href=&quot;http://www.team-cyperus.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Team Cyperus&lt;/a&gt;, to provide commercial support for me, as it was something that industries told my minions was really needed.&lt;/p&gt;
&lt;p&gt;Well, it did not take too long for someone elseto see the benefit in supporting me!&lt;/p&gt;
&lt;p&gt;Go see their &lt;a href=&quot;http://cmind.io/blog/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;press release&lt;/a&gt; about this acquisition!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/community/&quot;&gt;community&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/commercial/&quot;&gt;commercial&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/services/&quot;&gt;services&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/support/&quot;&gt;support&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/740/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/740/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/740/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/740/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/740/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/740/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/740/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/740/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/740/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/740/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/740/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/740/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/740/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/740/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=740&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 09 Jun 2017 11:15:40 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Already sold out? – Eclipse Democamp Oxygen 2017, June 28th 2017</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=28208</guid>
	<link>https://eclipsesource.com/blogs/2017/06/09/already-sold-out-eclipse-democamp-oxygen-2017-june-28th-2017/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Every year it is amazing to see how fast the &lt;/span&gt;&lt;a href=&quot;https://www.eventbrite.de/e/eclipse-democamp-oxygen-2017-tickets-34566386994&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse DemoCamp in Munich&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; sells out. To give everyone a fair chance to register, we have announced the time the registration opens in advance. This year, it took less than 1 week, until the available 120 seats were fully booked. However, even if you did not get a seat, we still encourage you to register for the waiting list. You can register &lt;/span&gt;&lt;a href=&quot;https://www.eventbrite.de/e/eclipse-democamp-oxygen-2017-tickets-34566386994&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. There you’ll also find detailed information on the location, agenda, time and more. The democamp is in 3 weeks (June 28th 2017) and some of the 120 registrants will be forced to cancel. We remind all current registrants to double check their availability. We expect some people to unregister before the event. If and only if you are on the waiting list, you will be notified immediately, once a seat becomes available. We wish you good luck and we are looking forward to great demos and seeing you in June!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A big thanks to our sponsors: &lt;/span&gt;&lt;a href=&quot;https://www.bsi-software.com/en/home.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;BSI Business Systems Integration AG&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, EclipseSource München GmbH and Eclipse Foundation.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 09 Jun 2017 07:13:02 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Preview of a guide for Java developers</title>
	<guid isPermaLink="true">http://vertx.io/blog/preview-of-a-guide-for-java-developers</guid>
	<link>http://vertx.io/blog/preview-of-a-guide-for-java-developers</link>
	<description>&lt;article&gt;&lt;p&gt;I could not attend the last Eclipse Vert.x community face-to-face meeting last fall, but one item that was discussed is the need for guides aimed at certain types of developers.
One of my missions as part of joining the team was to work on this and I’m very happy to share it with you today!&lt;/p&gt;
&lt;h2 id=&quot;a-gentle-guide-to-asynchronous-programming-with-eclipse-vert-x-for-enterprise-application-developers&quot;&gt;A gentle guide to asynchronous programming with Eclipse Vert.x for enterprise application developers&lt;/h2&gt;
&lt;p&gt;The guide is called &lt;strong&gt;“A gentle guide to asynchronous programming with Eclipse Vert.x for enterprise application developers”&lt;/strong&gt; and it is an introduction to asynchronous programming with Vert.x, primarily aimed at developers familiar with mainstream non-asynchronous web development frameworks and libraries (e.g., Java EE, Spring).&lt;/p&gt;
&lt;p&gt;Quoting the introduction:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We will start from a wiki web application backed by a relational database and server-side rendering of pages; then we will evolve the application through several steps until it becomes a modern single-page application with “real-time” web features. Along the way you will learn to:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Design a web application with server-side rendering of pages through templates, and using a relational database for persisting data.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cleanly isolate each technical component as a reusable event processing unit called a verticle.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extract Vert.x services for facilitating the design of verticles that communicate with each other seamlessly both within the same JVM process or among distributed nodes in a cluster.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Testing code with asynchronous operations.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Integrating with third-party services exposing a HTTP/JSON web API.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Exposing a HTTP/JSON web API.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Securing and controlling access using HTTPS, user authentication for web browser sessions and JWT tokens for third-party client applications.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactoring some code to use reactive programming with the popular RxJava library and its Vert.x integration.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Client-side programming of a single-page application with AngularJS.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Real-time web programming using the unified Vert.x event bus integration over SockJS.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The guide takes a gradual approach by starting with a “quick and dirty” solution, then refactoring it properly, exposing the core Vert.x concepts, adding features, and moving from callbacks to RxJava.&lt;/p&gt;
&lt;h2 id=&quot;we-need-your-feedback-&quot;&gt;We need your feedback!&lt;/h2&gt;
&lt;p&gt;The code is available at &lt;a href=&quot;https://github.com/vert-x3/vertx-guide-for-java-devs&quot;&gt;https://github.com/vert-x3/vertx-guide-for-java-devs&lt;/a&gt;.
You can report feedback as Github issues to that repository and even offer pull-requests.&lt;/p&gt;
&lt;p&gt;You can check it out from GitHub (the AsciiDoc is being rendered fine from the repository interface) or you can check out pre-rendered HTML and PDF versions that I am temporarily sharing and keeping up-to-date from my Dropbox: &lt;a href=&quot;https://www.dropbox.com/sh/ni9znfkzlkl3q12/AABn-OCi1CZfgbTzOU0jYQpJa?dl=0&quot;&gt;https://www.dropbox.com/sh/ni9znfkzlkl3q12/AABn-OCi1CZfgbTzOU0jYQpJa?dl=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many thanks to Thomas Segismont and Julien Viet who contributed some parts, and also to the people who reviewed it privately.&lt;/p&gt;
&lt;p&gt;As usual, we welcome your feedback!&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: MDSD (and ME!) in Robotics</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=693</guid>
	<link>https://papyrusuml.wordpress.com/2017/06/08/mdsd-and-me-in-robotics/</link>
	<description>&lt;p&gt;One of my minions (from Queens’ University) pointed out an interesting document titled “&lt;a href=&quot;https://www.eu-robotics.net/sparc/upload/Newsroom/Press/2016/files/H2020_Robotics_Multi-Annual_Roadmap_ICT-2017B.pdf&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Robotics 2020 Multi-Annual Roadmap&lt;/a&gt;.” from &lt;a href=&quot;https://eu-robotics.net/sparc/&quot;&gt;Spark -The Partnership for Robotics in Europe.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is a &lt;span style=&quot;text-decoration: underline;&quot;&gt;very&lt;/span&gt; interesting read, especially for those, like me, who are involved in the &lt;a href=&quot;https://www.polarsys.org/projects/polarsys.rover&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse PolarSys Rover project&lt;/a&gt; and the &lt;a href=&quot;https://www.polarsys.org/papyrus-ic&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Papyrus Industry Consortium&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I especially like the following blurbs:&lt;/p&gt;
&lt;p&gt;From printed page 248 (go to page 258 in the PDF):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“Model based methods are needed at the core of all complex robot systems and through&lt;br /&gt;
the lifecycle. To address increasing complexity, a shift from human-oriented document-driven&lt;br /&gt;
approaches to computer-assisted tools and a computer processable model-driven approach is&lt;br /&gt;
needed in order to gain from design support processes”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And from printed page 251 (go to page 261 in the PDF):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“Model-driven software development and domain specific languages are core technologies&lt;br /&gt;
required in order to achieve a separation of roles in the robotics domain while also improving&lt;br /&gt;
composability, system integration, and also addressing non-functional properties”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Many of these aspects are are already part of work that has been one on me.&lt;/p&gt;
&lt;p&gt;This is exactly where I &lt;strong&gt;can&lt;/strong&gt; and &lt;strong&gt;will&lt;/strong&gt; make a difference!&lt;/p&gt;
&lt;p&gt;Shoutout to my minion GD for making me aware of this!&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/dsml/&quot;&gt;DSML&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus/&quot;&gt;Papyrus&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/&quot;&gt;Papyrus IC&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/polarsysrover/&quot;&gt;PolarSysRover&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/robotml/&quot;&gt;RobotML&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/693/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/693/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/693/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/693/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/693/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/693/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/693/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/693/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/693/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/693/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/693/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/693/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/693/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/693/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=693&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 08 Jun 2017 20:25:22 +0000</pubDate>
</item>
<item>
	<title>Fabio Zadrozny: LiClipse 4.0 released</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7855001383687474475.post-7682644615242560442</guid>
	<link>http://liclipse.blogspot.com/2017/06/liclipse-40-released.html</link>
	<description>LiClipse 4.0 is now available for download!&lt;br /&gt;&lt;br /&gt;This is the first release based on Eclipse Oxygen (built on 4.7 RC3). It's still not a final release, but very close to it, so, make sure you take a look at &lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.7/platform.php&quot;&gt;https://www.eclipse.org/eclipse/news/4.7/platform.php&lt;/a&gt; for the latest news in the platform (the gem for me is now being able to hide the status bar -- personally, I'm now using Eclipse without the toolbar nor status bar -- really nice for a minimalist theme).&lt;br /&gt;&lt;br /&gt;There was a critical fix for users on Mac OS which resulted in LiClipse not working properly after an update. Note that for Mac users which are using LiClipse 3.x, a fresh install is needed (follow the instructions from &lt;a href=&quot;http://www.liclipse.com/download.html#updating_native&quot;&gt;http://www.liclipse.com/download.html#updating_native&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;The other major changes in this release are actually in PyDev, which featured a fix which prevented the code-coverage from working properly and now supports code coverage when testing with pytest. Also, IronPython is supported again in the debugger (it was previously broken because IronPython didn't support &lt;b&gt;sys._current_frames&lt;/b&gt; (although an important note is that &lt;b&gt;IronPython 2.7.6 and 2.7.7 don't work with PyDev&lt;/b&gt; because of a critical issue in &lt;b&gt;IronPython&lt;/b&gt;, so, either keep to IronPython 2.7.5 or use the development version).&lt;br /&gt;&lt;br /&gt;There were also fixes in the PyLint integration, updating docstrings, finding __init__ on code-completion when it's resolved to a superclass, etc... See: &lt;a href=&quot;http://www.pydev.org/&quot;&gt;http://www.pydev.org&lt;/a&gt; for more details.&lt;br /&gt;&lt;br /&gt;Enjoy!</description>
	<pubDate>Thu, 08 Jun 2017 18:35:53 +0000</pubDate>
	<author>noreply@blogger.com (Fabio Zadrozny)</author>
</item>
<item>
	<title>Eclipse Announcements: Last Chance to Register for EclipseCon France 2017</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/DT7QO8oZxKg/registration</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/DT7QO8oZxKg/registration</link>
	<description>Sign up for learning at EclipseCon France, June 21-22. XText, Capella, Science, Docker, LSP and much more!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/DT7QO8oZxKg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 08 Jun 2017 14:45:00 +0000</pubDate>
</item>
<item>
	<title>typefox.io: sprotty – A Web-based Diagramming Framework</title>
	<guid isPermaLink="false">http://typefox.io/?p=14259</guid>
	<link>http://typefox.io/sprotty-a-web-based-diagramming-framework</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 20px; padding-right: 0px; padding-bottom: 20px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 20px;&quot;&gt;
			&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
				&lt;p&gt;Development tools in the web are trending. With &lt;a href=&quot;http://typefox.io/category/eclipse/theia-one-ide-for-desktop-cloud&quot;&gt;Theia&lt;/a&gt;, we have already started to build an IDE platform with web technologies that works for browser apps as well as rich clients. While &lt;a href=&quot;http://www.xtext.org&quot;&gt;Xtext&lt;/a&gt;, &lt;a href=&quot;https://microsoft.github.io/monaco-editor/&quot;&gt;Monaco&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol&quot;&gt;LSP&lt;/a&gt; constitute a good foundation for textual editing, the question arises whether we can extend this idea for graphics. So we started brooding over a graphical framework as well and here is the result: Let me present you to &lt;em&gt;&lt;strong&gt;sprotty&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;sprotty is a web-based framework for diagrams. It is open-source under the Apache 2 license. The &lt;a href=&quot;https://github.com/theia-ide/sprotty&quot;&gt;source code is on Github&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;fusion-video fusion-youtube&quot;&gt;&lt;div class=&quot;video-shortcode&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;Rendering and Animations&lt;/h3&gt;
&lt;p&gt;sprotty uses SVG, and by that offers modern, stable and scalable rendering on a wide range of browsers&lt;/p&gt;
&lt;p&gt;In sprotty, animations have been built-in right from the beginning, so the framework is prepared for asynchronous state changes everywhere. Animations help the user of a sprotty diagram to keep the context without being distracted by flickering. We already ship a set of pre-built transitions for morphing diagrams on state changes, but you can easily build your own ones. You can even travel back and forth in time using animations.&lt;/p&gt;
&lt;p&gt;sprotty also comes with a bridge to the &lt;a href=&quot;https://www.eclipse.org/elk/&quot;&gt;Eclipse Layout Kernel&lt;/a&gt; for sophisticated automatic diagram layout.&lt;/p&gt;
&lt;h3&gt;Separation of Client and Server&lt;/h3&gt;
&lt;p&gt;A sprotty app usually consists of two major components: The &lt;i&gt;client&lt;/i&gt; only holds a model of the current diagram, renders it, and interacts with the user. The optional &lt;i&gt;server&lt;/i&gt; knows about an underlying semantic model and how to map it to diagram elements. Client and server communicate by sending each other JSON notifications. This minimizes the memory footprint on the client, which is necessary for a browser app. A server can handle much bigger amounts of data, e.g. from a database or a development workspace. Having said that, sprotty can of course be used a client-only app without a backend.&lt;/p&gt;
&lt;h3&gt;Integration With LSP, Xtext and Theia&lt;/h3&gt;
&lt;p&gt;While sprotty is not necessarily tied to the LSP, its architecture is a good match. We have integrated it with Theia by extending an Xtext-based language server with the sprotty server, tunneling the messages through the LSP, and creating a Theia widget holding the sprotty client. The &lt;a href=&quot;https://github.com/TypeFox/theia-sprotty-example&quot;&gt;source code is on Github&lt;/a&gt; as well. The result can be seen here:&lt;/p&gt;
&lt;div class=&quot;fusion-video fusion-youtube fusion-no-medium-visibility&quot;&gt;&lt;div class=&quot;video-shortcode&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;Reactive Architecture with Dependency Injection&lt;/h3&gt;
&lt;p&gt;sprotty’s is &lt;a href=&quot;https://github.com/TypeFox/sprotty/wiki/Architectural-Overview&quot;&gt;inspired by modern reactive frameworks&lt;/a&gt; like React/Flux. Information flows in a unidirectional circle between three functional components. This architecture is much less susceptible to event feedback cycles than the traditional model-view-controller approach. As the components don’t rely on a shared state, they can be unit-tested individually without the need to set up the entire environment or to start a browser.&lt;/p&gt;
&lt;p&gt;In the viewer component, sprotty uses &lt;a href=&quot;https://github.com/snabbdom/snabbdom&quot;&gt;a very fast virtual DOM framework&lt;/a&gt; that patches the actual DOM with the changes. Using so called &lt;em&gt;thunks&lt;/em&gt; you can skip entire branches of the DOM if they are unchanged to further optimize performance.&lt;/p&gt;
&lt;p&gt;sprotty’s client is implemented in TypeScript, so you can enjoy the benefits of static typing if you wish or use JavaScript directly if not. The SVG views can be easily specified using JSX and styled with CSS.&lt;/p&gt;
&lt;p&gt;All components of a diagram are wired up with &lt;a href=&quot;https://github.com/TypeFox/sprotty/wiki/Dependency-Injection&quot;&gt;dependency injection&lt;/a&gt;. This way, users can customize every single part, while getting good defaults without much ado.&lt;/p&gt;
&lt;p&gt;The sprotty server is written in Xtend, which is transpiled to Java as TypeScript is to JavaScript. Integration with Xtext and a language server is easy.&lt;/p&gt;
&lt;h3&gt;Current State&lt;/h3&gt;
&lt;p&gt;We have just started sprotty but it should already be applicable for many scenarios. We plan further extensions, e.g. to allow the user assemble the content of a diagram and persist the result. We expect to get quite some momentum in the near future in combination with the Theia project.&lt;/p&gt;
&lt;p&gt;Give it a try and let us know what you think. sprotty works best with the Chrome browser. Issue reports are welcome. Like in Theia, the CDT team at Ericsson has started contributing to sprotty, and so could you!&lt;/p&gt;
&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 08 Jun 2017 13:54:55 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: Untested Code is like Schrödinger’s Cat – Dead or Alive?</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1972</guid>
	<link>https://kichwacoders.com/2017/06/08/untested-code-is-like-schrodingers-cat-dead-or-alive/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;catinbox2&quot; class=&quot;alignnone size-full wp-image-2339&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/catinbox22.jpg?w=840&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If every line of untested code is like Schrödinger’s cat – Potentially dead or alive – how important is it to ‘open the box’ properly and know for sure if the code will leap out and run?&lt;/p&gt;
&lt;p&gt;The perceived wisdom that if a piece of code hasn’t been tested you can assume it won’t work, is proof – if any were needed – that coders will always expect the worst case scenario when creating code. Unlike Schrödinger, a coder will not waste time mulling over the metaphysical possibilities of whether their code might be dead or alive or even dead AND alive at the same time – they need certainty, and as quickly as possible. However any amount of testing will only be worthwhile if the quality of that testing is high.   In this blog Yannick Mayeur, a Kichwa Coders intern, describes how he kept his fur on whilst improving the testing coverage of Eclipse January.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;An introduction to JUnit&lt;/h2&gt;
&lt;p&gt;This week I was reintroduced to JUnit, having forgotten most of what I had learned about it at the &lt;a href=&quot;http://www.iut-blagnac.fr/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;University Institute of Technology&lt;/a&gt; back home. JUnit is a unit testing framework. It is used to test the different methods of a program to see whether or not the intended behaviour is working. It is often said that a method that is not tested is a method full of bugs, and after a week of testing  I can confirm that this saying is indeed grounded in truth.&lt;/p&gt;
&lt;p&gt;My job this week was to improve the test coverage of Eclipse January. You can calculate the coverage of a program using the EclEmma plug-in. I worked on the DatasetUtils class, improving the coverage from 47% to almost 58%, and fixing bugs using two methods:  (&lt;a href=&quot;https://github.com/eclipse/january/pull/178&quot;&gt;https://github.com/eclipse/january/pull/178&lt;/a&gt; and &lt;a href=&quot;https://github.com/eclipse/january/pull/188&quot;&gt;https://github.com/eclipse/january/pull/188&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Seeing that bugs can exist in untested code written by people that know a lot more about what they are doing than I do, really showed me the importance of testing.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekSix.md#how-i-did-it&quot; id=&quot;user-content-how-i-did-it&quot;&gt;&lt;/a&gt;How I did it&lt;/h2&gt;
&lt;p&gt;This is a test I have written for the method “crossings”. Writing this test helped me highlight some unexpected behaviour in the way it works.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; testCrossings3() {
	&lt;span class=&quot;pl-smi&quot;&gt;Dataset&lt;/span&gt; yAxis &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatasetFactory&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;createFromObject(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Double&lt;/span&gt;[] {
			&lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1.1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.9&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1.5&lt;/span&gt; });
	&lt;span class=&quot;pl-smi&quot;&gt;Dataset&lt;/span&gt; xAxis &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatasetFactory&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;createFromObject(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Double&lt;/span&gt;[] {
			&lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4.0&lt;/span&gt; });
	&lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Double&lt;/span&gt;&amp;gt;&lt;/span&gt; expected &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;ArrayList&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Double&lt;/span&gt;&amp;gt;&lt;/span&gt;();
	expected&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;add(&lt;span class=&quot;pl-c1&quot;&gt;2.5&lt;/span&gt;);
	&lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Double&lt;/span&gt;&amp;gt;&lt;/span&gt; actual &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatasetUtils&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;crossings(xAxis, yAxis, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,
			&lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;);
	assertEquals(expected, actual);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This shows what the values look like: &lt;a href=&quot;https://cloud.githubusercontent.com/assets/14848887/26053575/49820a9c-3961-11e7-80be-c7cc338d7a1e.png&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;behaviour&quot; src=&quot;https://cloud.githubusercontent.com/assets/14848887/26053575/49820a9c-3961-11e7-80be-c7cc338d7a1e.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The expected behaviour of the method as written in the test would be that the 3 crossing points would be merged into one at 2.5, but this wasn’t what was happening, indeed the code was using “&amp;gt;” instead of “&amp;gt;=”. If left untested this code’s bug would probably never have been discovered.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Discovering bugs like this one is crucial. When users employ this method they are almost certainly expecting the same behaviour that I was, and therefore won’t understand why their code isn’t working – especially if they can’t see the original code of the method and only have access to its Javadoc. I hope that correcting bugs like this one will create a smoother user experience for coders in the future.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1972/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1972/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1972&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 08 Jun 2017 08:50:22 +0000</pubDate>
</item>
<item>
	<title>itemis: Improving Eclipse CDT Indexer Performance</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/improving-eclipse-cdt-indexer-performance</guid>
	<link>https://blogs.itemis.com/en/improving-eclipse-cdt-indexer-performance</link>
	<description>&lt;p&gt;Many of our customers have chosen &lt;a href=&quot;https://eclipse.org/cdt/&quot; style=&quot;font-size: 16px;&quot;&gt;&lt;span&gt;Eclipse CDT&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; as their tooling for developing C/C++ projects and they frequently complain about the poor runtime of the CDT indexer. I would claim that we (Java developers) are quite spoiled about the excellent performance of the Java tooling in Eclipse.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Indexing a large Java workspace at startup may take several seconds, for really large projects maybe a few minutes, but afterwards it rarely blocks the sophisticated Java tooling. Be it large code imports or refactorings, Eclipse Java tooling handles that very well. But when developing a large C project, indexing may take several minutes, maybe even half an hour or more, depending on the available memory and CPU of course. This was the trigger for us to put some effort into analyzing the hotspots of the CDT indexer with the goal to improve performance.&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt; &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To make a long story short, an additional cache of internal string handling may speed up indexing time of certain projects by nearly 40%!&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Factors that Influence Indexer Performance&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First of all, let’s investigate the different factors that influence the indexer performance:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;strong&gt;Java heap size&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that is available to the indexer for a cache:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If the internally used memory for building and managing the index is too low, parts of the index is stored on the hard drive and we all know that writing data to and reading it from a hard drive is much more expensive than accessing it from main memory.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The CDT indexer has a preference option to allow it to consume up to 50% of the available heap size for an internal cache.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; of the C/C++ source files:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If the sources are organized in a flat hierarchy, i.e. with few includes, and if it does not contain thousands of macro definitions, the indexer is much faster than sources with a high degree of includes and with plenty of macro definitions.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;strong&gt;Hardware resources&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The faster the CPU / hard drive / memory, the faster the indexer – obviously ;-)&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We don’t have much influence on the latter two factors, but at least we can configure Eclipse and the CDT indexer to have enough memory available (e.g. 1 GB). But still, performance is far from acceptable (some customers even reported times of 45 minutes and longer).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So we took one of our customer’s projects, an &lt;/span&gt;&lt;a href=&quot;https://www.autosar.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AUTOSAR&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; project, which had an indexing time of slightly more than 10 minutes on my machine, and used the &lt;/span&gt;&lt;a href=&quot;https://www.yourkit.com/java/profiler/features/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;YourKit Java Profiler&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to search for some hotspots:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;observation: during 1 minute, the indexer was creating more than 4 billion (!) objects of type &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/cdt/blob/cdt_9_2/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/ShortString.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ShortString&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/cdt/blob/cdt_9_2/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/LongString.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;observation: most calculation time is spent for comparing large char arrays (e.g. length &amp;gt; 70,000) which are represented by long strings.&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To tackle these two issues, we first need to understand the actual problem:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Why are so many objects created (and garbage collected just as fast)?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;What are these long strings?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Why is it necessary to compare them?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;How can we improve string handling and comparison?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Structure Matters!&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When looking into these long strings that are frequently compared, it turns out that they consist of plenty of macro definitions concatenated in alphabetical order. It seems that they are calculated for particular locations in the source files for fast lookup. (To be honest, I did not (yet) fully understand how the indexer is working in detail, e.g. why it needs to store so many long but very similar strings – so please correct me if the conclusions to my observations are not correct.) We found the reason for these incredible long list of macro definitions inside the code structure which is sketched below:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;improve-Eclipse-CDT-Indexer-Performance-macro-definitions-inside-code-structure.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Embedded/macro-definitions-inside-code-structure.png?t=1496234112808&amp;amp;width=724&amp;amp;name=macro-definitions-inside-code-structure.png&quot; style=&quot;width: 724px;&quot; title=&quot;improve-Eclipse-CDT-Indexer-Performance-macro-definitions-inside-code-structure.png&quot; width=&quot;724&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There is one large header file which contains more than 1,000 macro definitions (&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MemMap.h&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;) and there are &lt;/span&gt;&lt;strong style=&quot;background-color: transparent;&quot;&gt;many &lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;other header files that include this file – even multiple times. New macro definitions and includes to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MemMap.h&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; do alternate, resulting in different sets of defined macros at each location. These macro definitions are stored by the indexer inside a data structure that is basically a super large char array. For adding and searching entries (e.g. the set of defined macros at a particular location), a binary tree data structure is used on top of that super large char array. Whenever a candidate string should be added or searched inside this binary tree, a visitor is used to compare existing entries with that candidate. The comparison must decide whether the candidate entry is smaller or larger than existing entries, which requires the strings to be compared character by character. For each entry to be compared, a new &lt;code&gt;ShortString&lt;/code&gt; or &lt;code&gt;LongString&lt;/code&gt; object is created which is a wrapper of the actual string with a &lt;code&gt;java.lang.String&lt;/code&gt;-like API for comparison.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First Attempt: Reducing Object Creation&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our first guess was that the immense number of &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;- and &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; objects may slow down the overall performance, so we reduced that as far as possible:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Whenever a new string is stored inside the database, most of the time its location in the data structure (an index of the super large char array) is of interest – so we directly returned that index instead of creating (and immediately disposing) a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Short&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-/&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; object.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Whenever some particular string is requested via such an index (e.g. the represented char array or a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;java.lang.String&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instance), we directly retrieved that data instead of creating (and immediately disposing) a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-/&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; object.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We only left the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-/&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; objects when they are needed for comparisons.&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Although there are much less objects created, the indexer run time was not affected at all. It seems as if the Java compiler and the VM do quite some optimizations so that the overhead of creating wrapper objects does not really affect performance.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Second Attempt: Optimizing Comparison of Char Arrays&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Whenever two &lt;/span&gt;&lt;strong&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instances are compared (i.e. determining their lexicographical order), &lt;/span&gt;&lt;strong&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;String.&lt;/code&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/cdt/blob/cdt_9_2/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/ShortString.java#L146&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;compareChars&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(..)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is called. This looks odd. For understanding how and why this could be optimized, we must first understand the difference between a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ShortString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;The database (the super large char array) is divided into chunks of 4096 chars. Whenever a string should be stored inside the database, one or more chunks must be allocated. If the string to be stored is larger than the available space inside one chunk, it must be split over multiple chunks.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ShortString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is shorter than the size of a chunk, so it fits into a single chunk.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is larger than the size of a single chunk, so it must be split and distributed over multiple chunks.&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A pointer to the beginning of the stored string is enough to represent the location and to retrieve it again when needed (the last entry in a chunk is a pointer to the next chunk).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The costly comparison in our AUTOSAR project compares strings with length &amp;gt; 70,000, so it compares strings that are stored in ⌈70,000 / 4,096⌉ = 18 chunks. The current implementation loads the entire char array of full length for both strings to be compared, and compares them character by character, even if they already differ in a character contained in one of the first chunks. Our idea is a new compare logic for long strings, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString.compare(..)&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which loads and compares characters chunk by chunk to decide their lexicographical order. This implementation is listed in bug &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=515856&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;515856&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With this optimization, indexer performance is in fact increased for our AUTOSAR project: instead of 680 seconds, the indexer finished in 640 seconds. This is an improvement of roughly 6% with no additional memory consumption.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Third Attempt: Caching Char Arrays&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The previous two attempts already explained that &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instances are always newly created for each access of strings stored inside the super large char array. Moreover, each access on the actual string (represented by a char array stored in one or more chunks), (re-)retrieves the desired char array from the chunks, e.g. for comparing it against another string. The indexer has already a cache built-in which holds recently accessed chunks in memory until the indexer cache size limit is hit. If a requested chunk is not inside the cache, it must be loaded from the super large char array. However, the actual char array for comparison is still reconstructed inside the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; classes on each access.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Instead of caching chunks, we tried to cache the actual &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; objects. Moreover, instead of having a fixed cache size, we use Java &lt;/span&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/ref/package-summary.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;references&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to let the garbage collector free some memory when needed. So whenever a new &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is retrieved from the database and constructed from its chunks, it is stored by its long pointer in a map of references. Another access of the same string first checks whether the string is still contained in that map. If so, we can directly return it; if not, we need to re-construct the string from the chunks and re-add it into the map. It was a bit tricky to let the garbage collector free the memory for both, the string value and the key (the long pointer), but with a negligible overhead, it is possible. This implementation is listed in bug &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=514708&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;514708&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt; &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The resulting indexer performance in our AUTOSAR project looks promising: instead of 680 seconds, the indexer finished in 430 seconds. This is an &lt;/span&gt;&lt;strong&gt;improvement&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; of roughly &lt;/span&gt;&lt;strong&gt;37%&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;!&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Improved performance is typically a tradeoff between runtime and memory consumption. The above-mentioned patch uses &lt;/span&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/WeakReference.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;weak references&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; which are garbage collected as soon as heap size becomes sparse. Consequently, the newly introduced cache takes additional memory if available and the garbage collector takes care of cleaning it up when needed.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Benchmarking&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To quantify the performance improvements, we ran some benchmark tests for the latter two attempts. We tried several variants on the string cache to reduce memory consumption with the cost of slightly more code complexity. As test projects, we used the already mentioned AUTOSAR project as well as the &lt;/span&gt;&lt;a href=&quot;https://github.com/php/php-src&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;php&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; open source project, which has a totally different source code structure. Each project was indexed between 11 and 20 times with an indexer cache between 32 and 1024 MB (which did not noticeably affect performance). The results are shown in the table below. We also tried several other open source projects but failed to produce reasonable benchmark results: either the indexing time differed by just 1-2 seconds for a total indexing time between 15 and 45 seconds (samba, vlc, ffmpeg), or the indexer aborted because of too many errors (linux kernel, gcc). All results are listed &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/attachment.cgi?id=268355&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Project &lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan=&quot;3&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AUTOSAR [20 runs]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Average runtime / Min / Max&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan=&quot;3&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;PHP [11 runs]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Average runtime / Min / Max&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;&lt;i&gt;Original runtime in seconds&lt;/i&gt;&lt;/strong&gt;&lt;strong&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/strong&gt;&lt;strong&gt;&lt;i&gt;(speedup in percent)&lt;/i&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;576&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;(0%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;545&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;(0%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;667&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;(0%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;54&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;51&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;59&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LongString.compare (Second Attempt)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;509&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(11.6%)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;485&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(18.1%)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;571&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(6.2%)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-1.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;50&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;60&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(5.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak (1) String Cache (Third Attempt)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[ see explanation for note (1) below ]&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;370&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;342&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;419&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(31.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-20.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;64&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(11.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft (1) String Cache (Third Attempt)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-40&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;366&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(36.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-20&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;337&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(38.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-20&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;410&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(31.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;54&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;49&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-9.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;61&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(10.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LongString.compare &amp;amp; Weak String Cache&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;441&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(23.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;422&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(29.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;503&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(19.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-3.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;53&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;60&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(5.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LongString.compare &amp;amp; Soft String Cache&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;389&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(32.4%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;347&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(37.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;432&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(29.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;54&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0.3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;49&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-9.4%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;59&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(16.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak String Cache with disposing keys (2)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;371&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;342&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(37.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;421&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(31.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-2.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;59&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(11.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft String Cache with disposing keys&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-90&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;365&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px;&quot;&gt;(36.7%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-90&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;336&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px;&quot;&gt;(39.3%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-90&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;406&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px;&quot;&gt;(34.7%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-3.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-9.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;61&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; font-size: 14px;&quot;&gt;(13.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak String Cache with hard cache (3)&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(100 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;380&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(34.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;338&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;449&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(26%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-2.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;52&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;59&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(10.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft String Cache with hard cache&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(100 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;374&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;337&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;442&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(28.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-3.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-13.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;60&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(13.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak String Cache with hard cache&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(1000 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;370&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;340&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38.3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;420&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(33.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-0.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;49&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-13.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;63&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(11.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft String Cache with hard cache&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(1000 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-20&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;369&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(36%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-40&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;335&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(39.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-40&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;413&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(32.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-1.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; font-size: 14px;&quot;&gt;(-9.4%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;61&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(10.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The first row is the original indexer run time. The subsequent rows show the result of different adjustments of the second and third attempt with several combinations and adjustments of the string cache. Unfortunately, the benchmark results of the php project vary a lot so that there is no clear improvement for any of the listed attempts. There seems to be some other factor that makes the indexer runtime vary. At least the different attempts do not observably slow down the indexer runtime.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you can see in the highlighted cells for the AUTOSAR project, &lt;/span&gt;&lt;strong&gt;the string cache may speed up indexing time by up to 39%&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;! The &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-specific compare implementation, on the other hand, only results in a speedup of 6-18%. Quite interesting is that a combination of the second and third attempt performs worse than the third attempt alone, but I don’t have any reasonable explanation for this.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Some further remarks to the variants we used for benchmarking:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(1) &lt;/span&gt;&lt;a href=&quot;https://community.oracle.com/blogs/enicholas/2006/05/04/understanding-weak-references&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ethan Nicholas&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; says that “softly reachable objects are generally retained as long as memory is in plentiful supply. This makes them an excellent foundation for a cache”. The results confirm this citation.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(2) With a &lt;/span&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/ReferenceQueue.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ReferenceQueue&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, the disposal of strings also disposes their keys in the map, so the garbage collector is capable of entirely wiping the string cache if necessary. Fortunately, this overhead does not have significant impact on performance – it even performs better than without key disposal.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(3) If memory gets sparse, weak and soft references are disposed by the garbage collector. But what if the most recently used strings would remain in memory anyhow? We used a &lt;/span&gt;&lt;a href=&quot;http://java2go.blogspot.de/2010/04/how-to-write-simple-yet-bullet-proof.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;hard cache&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to test this setting. Unfortunately, this does not yield any better performance. So we can omit this overhead.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Some words about additional memory consumption by the cache keys:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The life cycle of the string cache is bound to the life cycle of the indexer for a particular project. So the entire cache is discarded as soon as the indexer is discarded for a project. During the indexing task, however, the cache will be filled with keys (long pointers) to the cached strings which are wrapped in weak or soft references. So whenever the heap size becomes sparse, the garbage collector may dispose the cached strings (which happened between 2 and 90 times in the benchmarks above). When the indexer was done with the AUTOSAR project, the map had around 60.000 keys and only 2.000 cached strings, the rest was garbage collected. Without disposing the keys, memory consumption for these keys is 60.000 * 8 Byte (long value) = 480 KB, which is less than 1/500 of the default indexer cache size. IMHO, this temporary extra memory is more than tolerable for the achieved performance boost. Fortunately, the extra logic for disposing keys via a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ReferenceQueue&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; does not affect the performance at all, so it does not hurt to clean that up, too :-)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;By the way, the modifications with the best results are provided in bug &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=514708&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;514708&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Join the Discussion!&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For code with less includes and less macro definitions, the exact same problems may not arise, but maybe the string lookup inside the binary tree is still the bottleneck. Please leave some comments whether you have similar or maybe other observations. Do you have further ideas or experiences how to improve performance?&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fimproving-eclipse-cdt-indexer-performance&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 31 May 2017 13:20:00 +0000</pubDate>
	<author>patrick.koenemann@itemis.com (Patrick Könemann)</author>
</item>
<item>
	<title>InfoQ Eclipse feed: Red Hat to Acquire Codenvy to Extend DevOps Tools Capability</title>
	<guid isPermaLink="true">http://www.infoq.com/news/2017/05/red-hat-acquires-codenvy?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>http://www.infoq.com/news/2017/05/red-hat-acquires-codenvy?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;http://www.infoq.com/styles/i/logo_bigger.jpg&quot; /&gt;&lt;p&gt;Red Hat has announced the acquisition of Codenvy, an Agile and cloud-native tools provider. Financial terms of the deal are not being publicly disclosed.&lt;/p&gt; &lt;i&gt;By Helen Beal&lt;/i&gt;</description>
	<pubDate>Wed, 31 May 2017 10:00:00 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: New Eclipse IoT Charter and Steering Committee</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4150</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/t6971F-tZEQ/</link>
	<description>&lt;p&gt;It is hard to believe the Eclipse IoT Working Group was launch over 5 years ago on &lt;a href=&quot;https://www.eclipse.org/org/press-release/20111101_m2msolutions.php&quot;&gt;November 1, 2011&lt;/a&gt;, at the time we called it Eclipse M2M.  A lot has changed over these 5 years, including the name, and the IoT industry has matured to be one of the dominant technology trends in the technology industry. The good news is the Eclipse IoT Working Group has been a huge success. We have a thriving open source community that includes 30 different projects, more than 200 developers and 30 member companies. Eclipse IoT is well known and positioned in the industry and continues to see momentum and growth.&lt;/p&gt;
&lt;p&gt;Given this community growth, we felt it was time to take a fresh look at the Eclipse IoT Working Group charter and the Steering Committee. After a number of drafts and revisions, we have updated and published the new &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/iotwg_charter.php&quot;&gt;working group charter&lt;/a&gt;.  Most of the changes were done to reflect the current focus on IoT runtimes and frameworks and adding more clarity to the roles and responsibilities of the Steering Committee.&lt;/p&gt;
&lt;p&gt;Now that the new charter as been approved, I am thrilled to have Red Hat, Bosch and Eurotech volunteer to participate in the Eclipse IoT Steering Committee. All three companies are active leaders in the Eclipse IoT community and the general IoT industry. They each bring a unique perspective on IoT and open source to our community:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bosch is a world leading industrial company that is considered a leader in providing industrial IoT solutions. Their commitment and involvement in the Eclipse IoT community is evident by their involvement in projects like Eclipse Leshan, Eclipse Hono, Eclipse Vorto, Eclipse Hawkbit, and Eclipse Ditto.&lt;/li&gt;
&lt;li&gt;Eurotech is well known industrial gateway vendor that was one of the founding members of Eclipse M2M. They have experience incredible success with Eclipse Kura and are on the path to success with Eclipse Kapua.&lt;/li&gt;
&lt;li&gt;Red Hat has deep roots in open source and enterprise IT. In the last 2 years they have become deeply involved in projects like Kapua, Hono and others. They have also been instrumental in helping launch our &lt;a href=&quot;https://iot.eclipse.org/testbeds/&quot;&gt;Eclipse IoT Open Testbeds&lt;/a&gt;.  Red Hat understands that for IoT to be successful it needs to integrate OT and IT. They are on the path to being a leader in this space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next 2-3 years are going to be very exciting for the IoT industry and in particular the Eclipse IoT community. We have the technology and individuals that are making a difference and delivering real and valuable technology for IoT solution developers. It is very exciting to have these 3 companies help lead the way to our continued success and momentum.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4150/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4150/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4150&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/t6971F-tZEQ&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 25 May 2017 17:48:18 +0000</pubDate>
</item>
<item>
	<title>Dave Carver: The State of Android and Eclipse</title>
	<guid isPermaLink="false">http://intellectualcramps.wordpress.com/?p=1135</guid>
	<link>https://intellectualcramps.wordpress.com/2017/05/25/the-state-of-android-and-eclipse/</link>
	<description>&lt;p&gt;So it has been a while since I posted an update of where things stand.  Honestly, not a lot has changed on the eclipse front.  We still don’t have built in AAR support, there is no integrated Gradle support between Buildship and Andmore, we are behind on Nougat support, and O is fast approaching release status.   With that said, there have been a few bug fixes contributed by the community, which were released as a maintenance release, but the larger corporate adoption… is pretty much non-existent from a contribution stand point.&lt;/p&gt;
&lt;p&gt;The later I’m not sure how to fix, as I whole heartily believe that Andmore needs a corporate backer and sponsor to fund things.   This could probably be avoided if several people that really have an itch to fix the base wanted to scratch it.   There is a lot to work on that it can be a bit overwhelming to figure out where to start.&lt;/p&gt;
&lt;p&gt;When Google had announced a couple years ago that Android Development Tools would not be maintained any longer, I had that itch to see if I could at least get it and the Moto Dev Studio tools to a place where it would have a chance to survive.  I managed to scratch that and over the next year with the help of several other committers bring you Andmore 0.5.0.   Believe me the most difficult work has been done, and that is getting everything through the IP process, what is there is clean from that stand point.&lt;/p&gt;
&lt;p&gt;So the general question now that Andmore is at the Eclipse Foundation, is there a dire need from the community to have Android tooling?   There was much outrage and yelling when Google made the decision to move to Intellij, some of it rightfully deserved some of it just background noise.   Regardless of the reasons, Android Tooling was always a Google controlled and sponsored project, it was open source in really name only (it took nearly 2 years for Doug’s CDT integration to be integrated into the core).   The same is happening with Android Studio, it is controlled and dominated by Google and is really open source in name only.  If Google decides for whatever reason that they want to move all development to the cloud and abandon Android Studio and Intellij, there is nothing that anyone will be able to do to prevent it.  The difference though is, that Jet Brains will pickup and continue developing Android support themselves.  Why, because they have a financial interest to make sure their IDE supports it for their corporate customers.&lt;/p&gt;
&lt;p&gt;This brings us back to the question… Does the community really want Android tooling built off the eclipse platform?   If so, how do we improve it, given that right now, this is largely a volunteer effort.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/intellectualcramps.wordpress.com/1135/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/intellectualcramps.wordpress.com/1135/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=intellectualcramps.wordpress.com&amp;amp;blog=20154979&amp;amp;post=1135&amp;amp;subd=intellectualcramps&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 25 May 2017 12:55:04 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: The Containerization of Dev Environments</title>
	<guid isPermaLink="false">https://cdtdoug.ca/?p=845</guid>
	<link>https://cdtdoug.ca/2017/05/24/the-containerization-of-dev-environments/</link>
	<description>&lt;p&gt;As a veteran tools architect working for a veteran embedded systems platform vendor, we’re getting pretty good at building cross development environments. You get all the speed and integration with other native tools that today’s rich host platforms can provide. Combine that that with a good installer and software maintenance tool, and it’s super simple for users to get setup and keep their installs updated with the latest fixes and patches. It’s worked for many years.&lt;/p&gt;
&lt;p&gt;So of course, I was a bit taken back with recent talk about delivering development environments in containers and distributing them to users for use with cloud IDEs. The claim is that the installation process is simpler. But I have to ask, while yes it is simpler for the provider, is it also &lt;span style=&quot;font-size: 1rem;&quot;&gt;simpler for the user?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I work with embedded software engineers. Their systems are complex and the last thing they want to do is fight with their tools. That doesn’t pay the bills. And that’s why we work so hard to make that management simpler. And if you don’t have the experience creating cross development environments, it is certainly appealing to only have to worry about one host platform, 64-bit Linux, as you do with Docker which, BTW, just happens to be the easiest to support especially relative to Windows.&lt;/p&gt;
&lt;p&gt;But do I really have to teach my embedded developer customers about Docker? How to clean up images as updates are delivered? How to start and stop containers, and in the case of Windows and Mac, the VMs that run those containers? And that’s not to mention cloud environments which are a whole new level requiring server management, especially as the developer community scales. Embedded development tools require a lot of horsepower. How many users can a server actually support and how do customers support the burstiness of demand?&lt;/p&gt;
&lt;p&gt;So, while I get it, and as vendors take this path and as users do get used to it, I do need to be prepared to support such environments. I’ll just feel a bit sad that we are giving up on providing our users the great experiences that native cross development tools provide.&lt;/p&gt;</description>
	<pubDate>Wed, 24 May 2017 15:38:08 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: Fuse and BRMS Tooling Maintenance Release for Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/integration-stack-4.4.3.Final.html</guid>
	<link>https://tools.jboss.org/blog/integration-stack-4.4.3.Final.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Try our complete Eclipse-Neon capable, Devstudio 10.4.0 compatible integration tooling.&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jbosstools jbdevstudio blog header&quot; src=&quot;https://tools.jboss.org/blog/images/jbosstools-jbdevstudio-blog-header.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;JBoss Tools Integration Stack 4.4.3.Final / JBoss Developer Studio Integration Stack 10.3.0.GA&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      All of the Integration Stack components have been verified to work with the same dependencies as JBoss Tools 4.4 and Developer Studio 10.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-new-for-this-release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-s-new-for-this-release&quot;&gt;&lt;/a&gt;What’s new for this release?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release syncs up with Devstudio 10.4.0, JBoss Tools 4.4.4 and Eclipse Neon.3.  It is also a maintenance release for Fuse Tooling, SwitchYard and the BRMS tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;released-tooling-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#released-tooling-highlights&quot;&gt;&lt;/a&gt;Released Tooling Highlights&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jboss-fuse-development-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-fuse-development-highlights&quot;&gt;&lt;/a&gt;JBoss Fuse Development Highlights&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;fuse-tooling-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling-highlights&quot;&gt;&lt;/a&gt;Fuse Tooling Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/resolved_issues&quot;&gt;Fuse Tooling 9.2.0.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.3.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;switchyard-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#switchyard-highlights&quot;&gt;&lt;/a&gt;SwitchYard Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/resolved_issues#switchyard_2_3_1_final_2&quot;&gt;SwitchYard 2.3.1.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.3.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jboss-business-process-and-rules-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-business-process-and-rules-development&quot;&gt;&lt;/a&gt;JBoss Business Process and Rules Development&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;bpmn2-modeler-known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#bpmn2-modeler-known-issues&quot;&gt;&lt;/a&gt;BPMN2 Modeler Known Issues&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/known_issues#bpmn2_1_3_3_final_1_3_1_final&quot;&gt;BPMN2 1.3.3.Final Known Issues Section&lt;/a&gt; of the Integration Stack 10.3.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;drools-jbpm6-known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#drools-jbpm6-known-issues&quot;&gt;&lt;/a&gt;Drools/jBPM6 Known Issues&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/known_issues#drools_6_5_1_final&quot;&gt;Drools 6.5.1.Final Known Issues Section&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;data-virtualization-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#data-virtualization-highlights&quot;&gt;&lt;/a&gt;Data Virtualization Highlights&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;teiid-designer-known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#teiid-designer-known-issues&quot;&gt;&lt;/a&gt;Teiid Designer Known Issues&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/known_issues#teiid_designer_11_0_1_final&quot;&gt;Teiid Designer 11.0.1.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.1.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-an-integration-stack&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-s-an-integration-stack&quot;&gt;&lt;/a&gt;What’s an Integration Stack?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Red Hat JBoss Developer Studio Integration Stack is a set of Eclipse-based development tools. It further enhances the IDE functionality provided by JBoss Developer Studio, with plug-ins specifically for use when developing for other Red Hat JBoss products.  It’s where the Fuse Tooling, DataVirt Tooling and BRMS tooling is aggregated.  The following frameworks are supported:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-fuse-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-fuse-development&quot;&gt;&lt;/a&gt;JBoss Fuse Development&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/apachecamel.html&quot;&gt;Fuse Tooling&lt;/a&gt; - JBoss Fuse Development provides tooling for Red Hat JBoss Fuse.  It features the latest versions of the Fuse Data Transformation tooling, Fuse Integration Services support, SwitchYard and access to the Fuse SAP Tool Suite.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/switchyard.html&quot;&gt;SwitchYard&lt;/a&gt; - A lightweight service delivery framework providing full lifecycle support for developing, deploying, and managing service-oriented applications.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-business-process-and-rules-development-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-business-process-and-rules-development-2&quot;&gt;&lt;/a&gt;JBoss Business Process and Rules Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Business Process and Rules Development plug-ins provide design, debug and testing tooling for developing business processes for Red Hat JBoss BRMS and Red Hat JBoss BPM Suite.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/bpel.html&quot;&gt;BPEL Designer&lt;/a&gt; - Orchestrating your business processes.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/bpmn2.html&quot;&gt;BPMN2 Modeler&lt;/a&gt; - A graphical modeling tool which allows creation and editing of Business Process Modeling Notation diagrams using graphiti.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/drools.html&quot;&gt;Drools&lt;/a&gt; - A Business Logic integration Platform which provides a unified and integrated platform for Rules, Workflow and Event Processing including KIE.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/jbpm.html&quot;&gt;jBPM6&lt;/a&gt; - A flexible Business Process Management (BPM) suite.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-data-virtualization-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-data-virtualization-development&quot;&gt;&lt;/a&gt;JBoss Data Virtualization Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Data Virtualization Development plug-ins provide a graphical interface to manage various aspects of Red Hat JBoss Data Virtualization instances, including the ability to design virtual databases and interact with associated governance repositories.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/teiiddesigner.html&quot;&gt;Teiid Designer&lt;/a&gt; - A visual tool that enables rapid, model-driven definition, integration, management and testing of data services without programming using the Teiid runtime framework.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-integration-and-soa-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-integration-and-soa-development&quot;&gt;&lt;/a&gt;JBoss Integration and SOA Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Integration and SOA Development plug-ins provide tooling for developing, configuring and deploying BRMS, SwitchYard and Fuse applications to Red Hat JBoss Fuse and Fuse Fabric containers, Apache ServiceMix, and Apache Karaf instances.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;All of the Business Process and Rules Development plugins, plus…​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/apachecamel.html&quot;&gt;Fuse Apache Camel Tooling&lt;/a&gt; - A graphical tool for integrating software components that works with Apache ServiceMix, Apache ActiveMQ, Apache Camel and the FuseSource distributions.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/switchyard.html&quot;&gt;SwitchYard&lt;/a&gt; - A lightweight service delivery framework providing full lifecycle support for developing, deploying, and managing service-oriented applications.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;the-jboss-tools-website-features-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#the-jboss-tools-website-features-tab&quot;&gt;&lt;/a&gt;The JBoss Tools website features tab&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Don’t miss the &lt;a href=&quot;https://tools.jboss.org/features&quot;&gt;Features tab&lt;/a&gt; for up to date information on your favorite Integration Stack components.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The easiest way to install the Integration Stack components is through the &lt;a href=&quot;https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;amp;product=jbossdeveloperstudio&amp;amp;version=6.3.0&amp;amp;productChanged=yes&quot;&gt;stand-alone installer&lt;/a&gt;.  If you’re interested specifically in Fuse we have the all-in-one installer &lt;a href=&quot;https://developers.redhat.com/download-manager/file/devstudio-integration-stack-10.3.0.GA-fuse-installer-runtime.jar&quot;&gt;JBoss Fuse Tooling + JBoss Fuse/Karaf runtime&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For a complete set of Integration Stack installation instructions, see &lt;a href=&quot;https://access.redhat.com/documentation/en/red-hat-jboss-developer-studio-integration-stack/10.0/paged/installation-guide/&quot;&gt;Integration Stack Installation Instructions&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Give it a try!&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Paul Leacu.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 24 May 2017 14:03:19 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat Developer Studio Maintenance Release for Eclipse Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/10.4.0.ga-for-neon.3.html</guid>
	<link>https://tools.jboss.org/blog/10.4.0.ga-for-neon.3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.Final.html&quot;&gt;JBoss Tools 4.4.4&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/neon/10.4.0.GA.html&quot;&gt;Red Hat JBoss Developer Studio 10.4&lt;/a&gt; for Eclipse Neon.3 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio10&quot; src=&quot;https://tools.jboss.org/blog/images/devstudio10.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://developers.redhat.com/products/devstudio&quot;&gt;Red Hat developers&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) JBoss Developer Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.6.3 (Neon.3) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neon3&quot;&gt;Eclipse 4.6.3 Neon JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat JBoss Developer Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/neon/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was improvements for container based development and bug fixing.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;improved-openshift-3-and-docker-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-openshift-3-and-docker-tools&quot;&gt;&lt;/a&gt;Improved OpenShift 3 and Docker Tools&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We continue to work on providing better experience for container based development in JBoss Tools and Developer Studio. Let’s go through a few interesting updates here.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;/a&gt;OpenShift Server Adapter enhanced flexibility&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift server adapter is a great tool that allows developers to synchronize local changes in the Eclipse workspace with running pods in the
      OpenShift cluster. It also allows you to remote debug those pods when the server adapter is launched in Debug mode.
      The supported stacks are Java and NodeJS.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As pods are ephemeral OpenShift resources, the server adapter definition was based on an OpenShift service resource and the pods are then
      dynamically computed from the service selector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This has a major drawback as it allows to use this feature only for pods that are part of a service, which may be logical for Web based applications
      as a route (and thus a service) is required in order to access the application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, it is now possible to create a server adapter from the following OpenShift resources:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service (as before)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;pod&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If a server adapter is created from a pod, it will be created from the associated OpenShift resource, in the preferred order:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As the OpenShift explorer used to display OpenShift resources that were linked to a service, it has been enhanced as well.
      It now displays resources linked to a deployment config or replication controller.
      Here is an example of a deployment with no service ie a deployment config:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, as an OpenShift server adapter can be created from different kind of resources, the kind of associated resource is displayed when
      creating the OpenShift server adapter:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once created, the kind of OpenShift resource adapter is also displayed in the Servers view:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This information is also available from the server editor:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;security-vulnerability-fixed-in-certificate-validation-database&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#security-vulnerability-fixed-in-certificate-validation-database&quot;&gt;&lt;/a&gt;Security vulnerability fixed in certificate validation database&lt;/h4&gt;
      &lt;div class=&quot;admonitionblock important&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When you use the OpenShift tooling to connect to an OpenShift API server, the certificate of the OpenShift API server
      is first validated. If the issuer authority is a known one, then the connection is then established. If the issuer is an
      unknown one, a validation dialog is first shown to the user with the details of the OpenShift API server certificate as well
      as the details of the issuer authority. If the user accepts it, then the connection is established. There is also an option to
      store the certificate in a database so that next time a connection is attempted to the same OpenShift API server, then the certificate
      will be considered valid an no validation dialog will be show again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;certificate validation dialog&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/certificate-validation-dialog.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We found a security vulnerability as the certificate was wrongly stored: it was partially stored (not all attributes were stored) so we may
      interpret a different certificate as validated where it should not.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We had to change the format of the certificate database. As the certificates stored in the previous database were not entirelly stored, there was
      no way to provide a migration path. As a result, after the upgrade, the certificate database will be empty. So if you had previously accepted some
      certificates, then you need to accept them again and fill the certificate database again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;cdk-3-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#cdk-3-server-adapter&quot;&gt;&lt;/a&gt;CDK 3 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The CDK 3 server adapter has been here for quite a long time. It used to be Tech Preview as CDK 3 was not officially released. It is now officially available.
      While the server adapter itself has limited functionality, it is able to start and stop the CDK virtual machine via its minishift binary.
      Simply hit Ctrl+3 (Cmd+3 on OSX) and type CDK, that will bring up a command to setup and/or launch the CDK server adapter.
      You should see the old CDK 2 server adapter along with the new CDK 3 one (labeled &lt;strong&gt;Red Hat Container Development Kit 3&lt;/strong&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter5&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter5.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All you have to do is set the credentials for your Red Hat account and the location of the CDK’s minishift binary file and the type of virtualization hypervisor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you’re finished, a new CDK Server adapter will then be created and visible in the Servers view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once the server is started, Docker and OpenShift connections should appear in their respective views, allowing the user to quickly create a new Openshift application and begin developing their AwesomeApp in a highly-replicable environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter4&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter4.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-container-platform-3-5-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-container-platform-3-5-support&quot;&gt;&lt;/a&gt;OpenShift Container Platform 3.5 support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift Container Platform (OCP) 3.5 has been
      &lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-brings-kubernetes-new-application-workloads-latest-version-red-hat-openshift-container-platform&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt; by Red Hat.
      JBossTools 4.4.4.Final has been validated against OCP 3.5.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-adapter-extensibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-adapter-extensibility&quot;&gt;&lt;/a&gt;OpenShift server adapter extensibility&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The OpenShift server adapter had long support for EAP/Wildfly and NodeJS based deployments. It turns out that it does a great deal of synchronizing
      local workspace changes to remote deployments on OpenShift which have been standardized through images metadata (labels). But each runtime has its
      own specific. As an example, Wildfly/EAP deployments requires that a re-deploy trigger is sent after the files have been synchronized.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to reduce the technical debt and allow support for other runtimes (lots of them in the microservice world), we have refactored the OpenShift
      server adapter so that each runtime specific is now isolated and that it will be easy and safe to add support for new runtime.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For a full in-depth description, see the following &lt;a href=&quot;https://github.com/jbosstools/jbosstools-openshift/wiki/Openshift-server-adapter-profile-and-its-subsystems&quot;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;pipeline-builds-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#pipeline-builds-support&quot;&gt;&lt;/a&gt;Pipeline builds support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pipeline based builds are now supported by the OpenShift tooling.
      When creating an application, if using a template, if one of the builds is based on pipeline, you can view the detail
      of the pipeline:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-wizard.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When your application is deployed, you can see the details of the build configuration for the pipeline based builds:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline details&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-details.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;More to come as we are improving the pipeline support in the OpenShift tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;update-of-docker-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#update-of-docker-client&quot;&gt;&lt;/a&gt;Update of Docker Client&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The level of the underlying com.spotify.docker.client plug-in used to access the Docker daemon has been upgraded to 3.6.8.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;run-image-network-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-image-network-support&quot;&gt;&lt;/a&gt;Run Image Network Support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new page has been added to the Docker Run Image Wizard and Docker Run Image Launch configuration that allows
      the end-user to specify the network mode to use.  A user can choose from Default, Bridge, Host, None, Container,
      or Other.  If Container is selected, the user must choose from an active Container to use the same network mode.
      If Other is specified, a named network can be specified.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode Configuration&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRunConfigNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;refresh-connection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#refresh-connection&quot;&gt;&lt;/a&gt;Refresh Connection&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Users can now refresh the entire connection from the Docker Explorer View.  Refresh can be performed two ways:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;using the right-click context menu from the Connection&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;using the Refresh menu button when the Connection is selected&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Refresh Connection&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRefreshConnection.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;/a&gt;API Change in JMX UI’s New Connection Wizard&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While hardly something most users will care about, extenders may need to be aware that the API for adding connection types to the &amp;amp;aposNew JMX Connection&amp;amp;apos wizard in the &amp;amp;aposJMX Navigator&amp;amp;apos has changed.  Specifically, the &amp;amp;aposorg.jboss.tools.jmx.ui.providerUI&amp;amp;apos extension point has been changed. While previously having a child element called &amp;amp;aposwizardPage&amp;amp;apos, it now requires a &amp;amp;aposwizardFragment&amp;amp;apos.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A &amp;amp;aposwizardFragment&amp;amp;apos is part of the &amp;amp;aposTaskWizard&amp;amp;apos framework first used in WTP’s ServerTools, which has, for a many years, been used throughout JBossTools. This framework allows wizard workflows where the set of pages to be displayed can change based on what selections are made on previous pages.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change was made as a direct result of a bug caused by the addition of the Jolokia connection type in which some standard workflows could no longer be completed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change only affects adopters and extenders, and should have no noticable change for the user, other than that the below bug has been fixed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;hibernate-runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime  providers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;hibernate-runtime-provider-updates-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates-2&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.0 runtime provider now incorporates Hibernate Core version 5.0.12.Final and Hibernate Tools version 5.0.5.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.1 runtime provider now incorporates Hibernate Core version 5.1.4.Final and Hibernate Tools version 5.1.3.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.2 runtime provider now incorporates Hibernate Core version 5.2.8.Final and Hibernate Tools version 5.2.2.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;forge-runtime-updated-to-3-6-1-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-6-1-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.6.1.Final&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.6.1.Final. Read the official announcement &lt;a href=&quot;http://forge.jboss.org/news/jboss-forge-3.6.1.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;startup&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/forge/images/4.4.4.AM3/startup.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.4.4 and Developer Studio 10.4 out we are already working on the next release for Eclipse Oxygen.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 24 May 2017 12:22:21 +0000</pubDate>
</item>

</channel>
</rss>
